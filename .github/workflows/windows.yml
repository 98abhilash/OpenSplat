name: OpenSplat (Windows)

on:
  push:
    branches:
      - ci-windows
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ published, edited ]

jobs:
  build:
    name: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022] # [windows-2019, windows-2022]
        arch: [x64] # [x64, x86]
        generator: ['Visual Studio 17 2022'] # ['Visual Studio 16 2019', 'Visual Studio 17 2022']
        torch-version: [2.2.1] # [1.12.0, 1.13.0, 2.0.0, 2.1.0, 2.1.1, 2.1.2, 2.2.0, 2.2.1]
        cuda-version: [11.8.0] # [12.3.1, 12.1.1, 11.8.0, 11.7.1, 11.6.2, 11.5.2,11.4.4, 11.3.1, 11.2.2, 11.1.1, 11.0.3, cpu]
        cmake-build-type: [ Release ] # [Debug, ClangTidy]
#        include:
#          - os: windows-2019
#            generator: 'Visual Studio 16 2019'
#          - os: windows-2022
#            generator: 'Visual Studio 17 2022'
    env:
      CCACHE_DIR: ${{ github.workspace }}\ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
      CL: /MP
      CMAKE_GENERATOR: ${{matrix.generator}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.arch}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Windows (ccache, ninja)
        run: |
          Invoke-WebRequest https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1-windows-x86_64.zip -OutFile ccache.zip
          Expand-Archive -Path .\ccache.zip -DestinationPath ${{ env.CCACHE_BASEDIR }}
          Remove-Item .\ccache.zip
          echo "${{ env.CCACHE_BASEDIR }}\ccache-4.9.1-windows-x86_64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip -OutFile ninja-win.zip
          # Expand-Archive -Path .\ninja-win.zip -Destination "${{ env.CCACHE_BASEDIR }}\bin"
          # Remove-Item .\ninja-win.zip
          # echo "${{ env.CCACHE_BASEDIR }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          .github/workflows/cuda/${{ runner.os }}.ps1 ${{ matrix.cuda-version }}

      - name: Install libtorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          $LIBTORCH_URL = "https://download.pytorch.org/libtorch/$env:CUDA_VER_SHORT/libtorch-win-shared-with-deps-${{ matrix.torch-version }}%2B$($env:CUDA_VER_SHORT).zip"
          echo $LIBTORCH_URL
          Invoke-WebRequest $LIBTORCH_URL -OutFile libtorch.zip
          Expand-Archive -Path .\libtorch.zip -DestinationPath ${{ env.CCACHE_BASEDIR }}
          Remove-Item .\libtorch.zip

      - name: Cache Build
        uses: actions/cache@v4
        id: cache-builds
        with:
          key: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}-ccache-${{ github.run_id }}
          restore-keys: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}-ccache-
          path: ${{ env.CCACHE_DIR }}

      - name: Configure and build
        run: |
          echo $env:PATH
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} `
            -DCMAKE_C_COMPILER_LAUNCHER:FILEPATH=ccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER:FILEPATH=ccache `
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}\libtorch
          cmake --build . --parallel --config ${{ matrix.cmake-build-type }}

      - name: Clean compiler cache
        shell: pwsh
        run: |
          ccache --show-stats
          ccache --evict-older-than 7d
          ccache -s
          ccache --show-stats
